{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","hooks/useLocalStorage.js","index.js","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css"],"names":["module","exports","ContactForm","onSubmitData","onCheckUnique","useState","name","setName","number","setNumber","handleChange","event","target","value","validateForm","alert","resetForm","className","s","form","onSubmit","preventDefault","id","shortid","generate","autoComplete","label","type","placeholder","onChange","submit_button","Filter","filter_title","filter_input","ContactList","contacts","onDeleteContact","map","contact","li","button","onClick","stylesForWrapper","width","margin","paddingTop","stylesForTitles","textAlign","color","App","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLocalStorage","setContacts","filter","setFilter","style","newContact","prevContacts","isExistContact","find","normalizedFilter","toLowerCase","includes","getFilteredContacts","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86fdab4f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"li\":\"ContactList_li__UAvMU\",\"button\":\"ContactList_button__3KlIW\"};","import { useState } from 'react';\nimport s from '../ContactForm/ContactForm.module.css';\nimport shortid from 'shortid';\n\nexport default function ContactForm({ onSubmitData, onCheckUnique }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handelSubmit = event => {\n    event.preventDefault();\n\n    const isValidateForm = validateForm();\n\n    if (!isValidateForm) {\n      return;\n    }\n\n    onSubmitData({ id: shortid.generate(), name, number });\n\n    resetForm();\n  };\n\n  const validateForm = () => {\n    if (!name || !number) {\n      alert('Some field is empty!');\n      return false;\n    }\n    return onCheckUnique(name);\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handelSubmit} autoComplete=\"off\">\n      <label className={s.label}>\n        Name{' '}\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Enter name\"\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n      <label className={s.label}>\n        Number{' '}\n        <input\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Enter phone number\"\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n      <button type=\"submit\" className={s.submit_button}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// class ContactForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleChange = event => {\n//     //   обновить стейт по вычисляемому значению name у инпутов name=\"...\" ->(event.target.name)\n//     const { name, value } = event.target;\n//     this.setState({ [name]: value });\n//   };\n\n//   handelSubmit = event => {\n//     const { name, number } = this.state;\n//     // чтоб не перезагружалась страница по умолчанию\n//     event.preventDefault();\n\n//     // валидация формы при сабмите\n//     const isValidateForm = this.validateForm();\n//     // если форма не валидна, выход\n//     if (!isValidateForm) {\n//       return;\n//     }\n//     // если форма валидна,\n//     // прокидываем данные введённые с формы(name,number) выше в App\n//     this.props.onSubmitData({ id: shortid.generate(), name, number });\n\n//     this.resetForm();\n//   };\n\n//   // Валидация формы (проверка на то, заполнены ли поля формы)\n//   validateForm = () => {\n//     const { name, number } = this.state;\n//     const { onCheckUnique } = this.props;\n\n//     // если не имя или не номер телефона\n//     if (!name || !number) {\n//       alert('Some field is empty!');\n//       // не прошла валидацию\n//       return false;\n//     }\n//     return onCheckUnique(name);\n//   };\n\n//   // очистка формы\n//   resetForm = () => {\n//     this.setState({\n//       name: '',\n//       number: '',\n//     });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n//     return (\n//       <form className={s.form} onSubmit={this.handelSubmit}>\n//         <label className={s.label}>\n//           Name{' '}\n//           <input\n//             type=\"text\"\n//             name=\"name\"\n//             placeholder=\"Enter name\"\n//             value={name}\n//             onChange={this.handleChange}\n//           />\n//         </label>\n//         <label className={s.label}>\n//           Number{' '}\n//           <input\n//             type=\"tel\"\n//             name=\"number\"\n//             placeholder=\"Enter phone number\"\n//             value={number}\n//             onChange={this.handleChange}\n//           />\n//         </label>\n//         <button type=\"submit\" className={s.submit_button}>\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\n// export default ContactForm;\n","import React from 'react';\nimport s from '../Filter/Filter.module.css';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <>\n      <h2 className={s.filter_title}>Find contacts by name</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Enter contact name\"\n        className={s.filter_input}\n        value={value}\n        onChange={onChange}\n      ></input>\n    </>\n  );\n};\n\nexport default Filter;\n","import PropTypes from 'prop-types';\nimport s from '../ContactList/ContactList.module.css';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <ul>\n      {contacts.map(contact => (\n        <li key={contact.id} className={s.li}>\n          {contact.name}: {contact.number}\n          <button\n            className={s.button}\n            onClick={() => onDeleteContact(contact.id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string,\n    }),\n  ),\n};\n\nexport default ContactList;\n","import { useState } from 'react';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\nimport useLocalStorage from './hooks/useLocalStorage';\n\nconst stylesForWrapper = {\n  width: '500px',\n  margin: '0 auto',\n  paddingTop: '30px',\n};\n\nconst stylesForTitles = {\n  textAlign: 'center',\n  color: '#6B5EAC',\n};\n\nexport default function App() {\n  const [contacts, setContacts] = useLocalStorage('contacts', '');\n  const [filter, setFilter] = useState('');\n\n  const handelDeleteContact = contactId => {\n    setContacts(contacts.filter(contact => contact.id !== contactId));\n  };\n\n  const contactFormSubmithandler = newContact => {\n    setContacts(prevContacts => [...prevContacts, newContact]);\n  };\n\n  const handelCheckUniqueContact = name => {\n    const isExistContact = !!contacts.find(contact => contact.name === name);\n    isExistContact && alert('Contact is already exist!');\n    return !isExistContact;\n  };\n\n  const changeFilter = event => {\n    setFilter(event.target.value);\n  };\n\n  const getFilteredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  return (\n    <div style={{ ...stylesForWrapper }}>\n      <h1 style={{ ...stylesForTitles }}>Phonebook</h1>\n\n      <ContactForm\n        onSubmitData={contactFormSubmithandler}\n        onCheckUnique={handelCheckUniqueContact}\n      />\n\n      <h2 style={{ ...stylesForTitles }}>Contacts</h2>\n\n      <Filter value={filter} onChange={changeFilter} />\n\n      <ContactList\n        contacts={getFilteredContacts()}\n        onDeleteContact={handelDeleteContact}\n      />\n    </div>\n  );\n}\n\n// class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: '',\n//   };\n\n//   // изменить стостояние от предыдущего\n//   handelDeleteContact = contactId => {\n//     this.setState(prevState => ({\n//       // беру все предыдущие контакты.Для каждого из них проверяю\n//       // по id(сравниваю с id контакта, который нужно удалить)\n//       // отфильтровывыю только те, id которых не равен id, контакта который нужно удалить\n//       contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n//     }));\n//   };\n\n//   // Получение данных state.name и state.number c ContactForm\n//   // добавление нового контакта\n//   contactFormSubmithandler = newContact => {\n//     this.setState(prevContact => ({\n//       contacts: [...prevContact.contacts, newContact],\n//     }));\n//   };\n\n//   handelCheckUniqueContact = name => {\n//     const { contacts } = this.state;\n//     // по контанктам проходим и на каждой итераци сравниваем имена существующие\n//     // в списке контактов с тем , которое приходит с формы\n//     // двойное НЕ используют для преобразования значений к логическому типу\n//     const isExistContact = !!contacts.find(contact => contact.name === name);\n\n//     //  alert сработает, если в левой части (isExistContact) будет  равен true(если\n//     // найдёться уже существующий контакт в списке)\n//     isExistContact && alert('Contact is already exist!');\n\n//     // функция возвращает ответ \"уникальный ли контакт или нет?\" Если пришло isExistContact=true(существует контакт),\n//     // функция возвращает: \"контакт НЕ уникальный\"\n//     return !isExistContact;\n//   };\n\n//   // Filter\n//   changeFilter = event => {\n//     this.setState({ filter: event.target.value });\n//   };\n\n//   getFilteredContacts = () => {\n//     const { contacts, filter } = this.state;\n//     // возвращаем те контакты, свойсто имени которых включает значение из this.state.filter\n//     const normalizedFilter = filter.toLowerCase();\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizedFilter),\n//     );\n//   };\n\n//   componentDidMount() {\n//     // взять контакты с предыдущей сессии, хранящиеся в localStorage\n//     const prevContacts = localStorage.getItem('contacts');\n//     // запарсить массив\n//     const parsedContacts = JSON.parse(prevContacts);\n\n//     // если в localStorage уже есть контакты, тогда их записываем в state.\n//     // если контакты=пустой массив(null), тогда ничего не записывается\n//     if (parsedContacts) {\n//       // записать в state предыдущие контакты\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     // если текущий контакт в state НЕ равен предыдущему контакту в state\n//     // проверяем обновился ли массив контактов\n//     if (this.state.contacts !== prevState.contacts) {\n//       // записываем в localStorage массив contacts обьектов ({id,name,number})\n//       // при каждом обновлении контакта, перезаписываем массив контактов\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   render() {\n//     const { filter } = this.state;\n//     // переменная для отрисовки отфильтрованных контактов\n//     const filteredContacts = this.getFilteredContacts();\n//     return (\n//       <div style={{ ...stylesForWrapper }}>\n//         <h1 style={{ ...stylesForTitles }}>Phonebook</h1>\n\n//         <ContactForm\n//           onSubmitData={this.contactFormSubmithandler}\n//           onCheckUnique={this.handelCheckUniqueContact}\n//         />\n\n//         <h2 style={{ ...stylesForTitles }}>Contacts</h2>\n\n//         <Filter value={filter} onChange={this.changeFilter} />\n\n//         <ContactList\n//           contacts={filteredContacts}\n//           onDeleteContact={this.handelDeleteContact}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n","import { useState, useEffect } from 'react';\n\nexport default function useLocalStorage(key, defaultValue) {\n  const [state, setState] = useState(() => {\n    return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1jGXr\",\"label\":\"ContactForm_label__36boj\",\"submit_button\":\"ContactForm_submit_button__aiPhI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter_title\":\"Filter_filter_title__3XsaL\",\"filter_input\":\"Filter_filter_input__ApgbL\"};"],"sourceRoot":""}